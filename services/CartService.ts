// CartService.ts - C·∫£i ti·∫øn ƒë·ªÉ ngƒÉn vi·ªác g·ªçi li√™n t·ª•c API
import AsyncStorage from "@react-native-async-storage/async-storage";
import { getCartAPI } from "@/utils/cartAPI";

// Key l∆∞u tr·ªØ
const CART_DATA_KEY = "@cart_data_";

// Cache v√† c√°c bi·∫øn ki·ªÉm so√°t
let cartDataCache: Record<number, any> = {}; // Cache theo userId
let lastCartFetch: Record<number, number> = {}; // Th·ªùi ƒëi·ªÉm fetch cu·ªëi theo userId
const CART_CACHE_TTL = 60000; // Cache 1 ph√∫t (c√≥ th·ªÉ ƒëi·ªÅu ch·ªânh)

// Promise cache ƒë·ªÉ tr√°nh tr√πng l·∫∑p request
const pendingPromises: Record<string, Promise<any>> = {};

// ƒêi·ªÅu khi·ªÉn logging
let debugLogging = true;

// H√†m log c√≥ ki·ªÉm so√°t
const logDebug = (message: string, ...args: any[]) => {
  if (debugLogging) {
    console.log(message, ...args);
  }
};

class CartService {
  /**
   * L·∫•y d·ªØ li·ªáu gi·ªè h√†ng v·ªõi c∆° ch·∫ø ch·ªëng tr√πng l·∫∑p
   */
  async getCartData(userId: number): Promise<any> {
    // Ki·ªÉm tra cache tr∆∞·ªõc khi l√†m b·∫•t c·ª© ƒëi·ªÅu g√¨
    const now = Date.now();
    if (cartDataCache[userId] && now - (lastCartFetch[userId] || 0) < CART_CACHE_TTL) {
      logDebug("üü¢ Using cached cart data for user", userId);
      return cartDataCache[userId];
    }
    
    const key = `getCartData_${userId}`;
    
    // Ki·ªÉm tra xem ƒë√£ c√≥ request ƒëang ch·∫°y ch∆∞a
    if (key in pendingPromises) {
      logDebug("üîÑ Reusing in-flight cart data request for user", userId);
      return pendingPromises[key];
    }
  
    try {
      // T·∫°o v√† l∆∞u promise
      const promise = this._getCartDataInternal(userId);
      pendingPromises[key] = promise;
      
      // ƒê·ª£i k·∫øt qu·∫£
      const result = await promise;
      
      // X√≥a kh·ªèi cache promise
      delete pendingPromises[key];
      
      return result;
    } catch (error) {
      // X√≥a kh·ªèi cache promise khi l·ªói
      delete pendingPromises[key];
      console.error("üî¥ Error in getCartData:", error);
      return null;
    }
  }
  
  /**
   * Ph∆∞∆°ng th·ª©c n·ªôi b·ªô ƒë·ªÉ l·∫•y d·ªØ li·ªáu gi·ªè h√†ng
   */
  private async _getCartDataInternal(userId: number): Promise<any> {
    try {
      // Ki·ªÉm tra l·∫°i cache (ƒë·ªÉ x·ª≠ l√Ω race condition)
      const now = Date.now();
      if (cartDataCache[userId] && now - (lastCartFetch[userId] || 0) < CART_CACHE_TTL) {
        logDebug("üü¢ Using cached cart data for user (double-check)", userId);
        return cartDataCache[userId];
      }

      logDebug("üü° Fetching cart data from API for user", userId);
      
      // G·ªçi API ƒë·ªÉ l·∫•y d·ªØ li·ªáu
      const cartData = await getCartAPI(userId);
      
      if (cartData) {
        // C·∫≠p nh·∫≠t cache
        cartDataCache[userId] = cartData;
        lastCartFetch[userId] = now;
        
        // L∆∞u v√†o AsyncStorage ƒë·ªÉ persistence
        await this.saveCartDataToStorage(userId, cartData);
        
        logDebug("üü¢ Cart data retrieved from API and cached for user", userId);
        return cartData;
      } else {
        logDebug("üü° No cart data found for user", userId);
        return { cartItems: [], totalPrice: 0 };
      }
    } catch (error) {
      console.error("üî¥ Error fetching cart data:", error);
      
      // Th·ª≠ l·∫•y t·ª´ storage n·∫øu API l·ªói
      try {
        const cachedData = await this.getCartDataFromStorage(userId);
        if (cachedData) {
          logDebug("üü° Using fallback data from storage for user", userId);
          return cachedData;
        }
      } catch (storageError) {
        console.error("üî¥ Error getting fallback cart data:", storageError);
      }
      
      return { cartItems: [], totalPrice: 0 };
    }
  }

  /**
   * L∆∞u d·ªØ li·ªáu gi·ªè h√†ng v√†o AsyncStorage
   */
  private async saveCartDataToStorage(userId: number, cartData: any): Promise<void> {
    try {
      const cartDataJson = JSON.stringify(cartData);
      await AsyncStorage.setItem(`${CART_DATA_KEY}${userId}`, cartDataJson);
    } catch (error) {
      console.error("üî¥ Error saving cart data to storage:", error);
    }
  }

  /**
   * L·∫•y d·ªØ li·ªáu gi·ªè h√†ng t·ª´ AsyncStorage
   */
  private async getCartDataFromStorage(userId: number): Promise<any | null> {
    try {
      const cartDataJson = await AsyncStorage.getItem(`${CART_DATA_KEY}${userId}`);
      if (cartDataJson) {
        return JSON.parse(cartDataJson);
      }
      return null;
    } catch (error) {
      console.error("üî¥ Error reading cart data from storage:", error);
      return null;
    }
  }

  /**
   * C·∫≠p nh·∫≠t d·ªØ li·ªáu gi·ªè h√†ng sau khi th√™m/x√≥a/s·ª≠a
   */
  async updateCartData(userId: number, cartData: any): Promise<void> {
    try {
      // C·∫≠p nh·∫≠t cache
      cartDataCache[userId] = cartData;
      lastCartFetch[userId] = Date.now();
      
      // L∆∞u v√†o AsyncStorage
      await this.saveCartDataToStorage(userId, cartData);
      
      logDebug("üü¢ Cart data updated for user", userId);
    } catch (error) {
      console.error("üî¥ Error updating cart data:", error);
    }
  }

  /**
   * L√†m m·ªõi d·ªØ li·ªáu gi·ªè h√†ng (force refresh)
   */
  async refreshCartData(userId: number): Promise<any> {
    try {
      // X√≥a cache
      delete cartDataCache[userId];
      delete lastCartFetch[userId];
      
      // X√≥a promise ƒëang ch·∫°y
      const key = `getCartData_${userId}`;
      delete pendingPromises[key];
      
      logDebug("üîÑ Forcing refresh of cart data for user", userId);
      
      // G·ªçi l·∫°i API
      return await this.getCartData(userId);
    } catch (error) {
      console.error("üî¥ Error refreshing cart data:", error);
      return null;
    }
  }

  /**
   * X√≥a d·ªØ li·ªáu gi·ªè h√†ng
   */
  async removeCartData(userId: number): Promise<void> {
    try {
      await AsyncStorage.removeItem(`${CART_DATA_KEY}${userId}`);
      
      // X√≥a kh·ªèi cache
      delete cartDataCache[userId];
      delete lastCartFetch[userId];
      
      logDebug("‚úÖ Cart data removed and cache cleared for user", userId);
    } catch (error) {
      console.error("üî¥ Error removing cart data:", error);
    }
  }

  /**
   * X√≥a to√†n b·ªô cache (h·ªØu √≠ch khi logout)
   */
  clearCache(): void {
    cartDataCache = {};
    lastCartFetch = {};
    // X√≥a t·∫•t c·∫£ pending promises
    for (const key in pendingPromises) {
      if (key.startsWith('getCartData_')) {
        delete pendingPromises[key];
      }
    }
    logDebug("üßπ Cart cache cleared completely");
  }
  
  /**
   * B·∫≠t/t·∫Øt debug logging
   */
  setDebugLogging(enabled: boolean): void {
    debugLogging = enabled;
    console.log(`üîß Cart debug logging ${enabled ? 'enabled' : 'disabled'}`);
  }
}

// T·∫°o v√† export m·ªôt instance singleton
const cartService = new CartService();
export default cartService;

// Export c√°c ph∆∞∆°ng th·ª©c ri√™ng l·∫ª ƒë·ªÉ t∆∞∆°ng th√≠ch ng∆∞·ª£c
export const getCartData = (userId: number) => cartService.getCartData(userId);
export const updateCartData = (userId: number, cartData: any) => cartService.updateCartData(userId, cartData);
export const refreshCartData = (userId: number) => cartService.refreshCartData(userId);
export const removeCartData = (userId: number) => cartService.removeCartData(userId);
export const clearCartCache = () => cartService.clearCache();
export const setCartDebugLogging = (enabled: boolean) => cartService.setDebugLogging(enabled);